<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>BLOG_NAME</title>
 <link href="YOUR_URL/atom.xml" rel="self"/>
 <link href="YOUR_URL"/>
 <updated>2014-09-17T17:32:48+10:00</updated>
 <id>BLOG_URL</id>
 <author>
   <name>BLOG_NAME</name>
 </author>

 
 <entry>
   <title>Useful Commands for Linux Server Monitoring</title>
   <link href="YOUR_URL/useful-commands-for-linux-server-monitoring.html"/>
   <updated>2014-09-17T00:00:00+10:00</updated>
   <id>BLOG_URL/useful-commands-for-linux-server-monitoring</id>
   <content type="html">&lt;h1&gt;Useful Commands for Linux Server Monitoring&lt;/h1&gt;

&lt;h2&gt;Disk Space Usage&lt;/h2&gt;

&lt;p&gt;Run below command to see your local drives&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;df -kl
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;output is like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;Filesystem     1K-blocks    Used Available Use% Mounted on
/dev/xvda       98760300 5259008  92498404   6% /
tmpfs            2048368       0   2048368   0% /dev/shm
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;alert alert-info alert-tip&#39;&gt;
All the numbers are in kbyte, if you want in GB you can do &lt;code&gt;df -lBG&lt;/code&gt;.
&lt;/div&gt;


&lt;h2&gt;Process Monitoring&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;top&lt;/code&gt; provides an ongoing look at processor activity in real time. It displays a listing of the most CPU-intensive tasks on the system.&lt;/p&gt;

&lt;p&gt;Once you run &lt;code&gt;top&lt;/code&gt; to watch the on going list, you can stop it by &lt;strong&gt;Ctrl+c&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;You can use &lt;code&gt;top&lt;/code&gt; for these reasons:&lt;/p&gt;

&lt;h3&gt;Get current time, uptime, logged in users&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;top -bn1 | head -n1 | tail -1f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;top - 15:48:43 up 131 days,  3:13,  1 user,  load average: 0.00, 0.03, 0.05
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;current time&lt;/strong&gt;: 15:48:43&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;uptime of machine&lt;/strong&gt;: 131&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;logged in users&lt;/strong&gt;: 1&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Processes information&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;top -bn1 | head -n2 | tail -1f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;Tasks: 113 total,   1 running, 112 sleeping,   0 stopped,   0 zombie
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Total processes&lt;/strong&gt;: 113&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Running processes&lt;/strong&gt;: 1&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Sleeping processes&lt;/strong&gt;: 112&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stopped processes&lt;/strong&gt;: 0&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Zombie processes&lt;/strong&gt;: 0, Processes waiting for its parent process to read its exit status&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;CPU usage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;top -bn1 | head -n3 | tail -1f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Output is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;Cpu(s):  0.1%us,  0.2%sy,  0.0%ni, 99.6%id,  0.0%wa,  0.0%hi,  0.0%si,  0.0%st
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User processes&lt;/strong&gt;: 0.1%us, this is the amount of actual CPU time spent in user-mode code (outside the kernel) within the process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;System processes&lt;/strong&gt;: 0.2%sy, it is the amount of CPU time spent in the kernel within the process (library code is part of user-mode).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Nice processes&lt;/strong&gt;: 0.0%ni&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Not used percentage&lt;/strong&gt;: 99.6%id&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Percentage of CPU processes waiting for IO processes&lt;/strong&gt;: 0.0%wa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Percentage of CPU served on hardware interrupts&lt;/strong&gt;: 0.0%hi, hardware interrupts are generated by hardware devices (network cards, keyboard controller, external timer, hardware senors, ...) when they need to signal something to the CPU (data has arrived for example).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Percentage of CPU served on software interrupts&lt;/strong&gt;: 0.0%si&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Percentage of CPU stolen from virtual machine&lt;/strong&gt;: 0.0%st, it represents time when the real CPU was not available to the current virtual machine&lt;/li&gt;
&lt;/ul&gt;


&lt;h3&gt;Top 5 processes by memory usage&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;top -bn1 -m | head -n12 | tail -7f
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Memory summary&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;free -m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;-m&lt;/strong&gt; will show all numbers in MB.&lt;/p&gt;

&lt;p&gt;Output is like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;             total   used   free  shared  buffers   cached
Mem:          4000   3370    629       0      242      280
-/+ buffers/cache:   2847   1152
Swap:          255      1    254
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Total Memory&lt;/strong&gt;: 4000, memory/physical RAM available for your machine.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Used Memory&lt;/strong&gt;: 3370,  memory/physical RAM used by system. This include even buffers and cached data size as well.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Free Memory&lt;/strong&gt;: 629, Total free and available RAM for new process to run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Shared Memory&lt;/strong&gt;: 0, it is obsolete and may be removed in future releases of free.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Buffered Memory&lt;/strong&gt;: 242, total RAM buffered by different applications in Linux&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Cached Memory&lt;/strong&gt;: 280, total RAM used for caching of data for future purpose.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actual Used Memory&lt;/strong&gt;: 2847, &lt;strong&gt;Used Memory - (Buffered Memory+Cached Memory)&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Actual Total Available Memory&lt;/strong&gt;: 1152, &lt;strong&gt;Total Memory - Actual Used Memory&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Nginx Stub Status Explanation</title>
   <link href="YOUR_URL/nginx-stub-status-explanation.html"/>
   <updated>2014-09-14T00:00:00+10:00</updated>
   <id>BLOG_URL/nginx-stub-status-explanation</id>
   <content type="html">&lt;h1&gt;Nginx Stub Status Explanation&lt;/h1&gt;

&lt;h2&gt;Make sure HttpStubStatusModule is compiled&lt;/h2&gt;

&lt;p&gt;Locate the nginx executable and use below command to verify that HttpStubStatusModule is compiled and available to you:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nginx -V 2&amp;gt;&amp;amp;1 | grep -o http_stub_status_module
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;alert alert-info alert-tip&#39;&gt;
&lt;h3&gt;No Nginx?&lt;/h3&gt;
&lt;p&gt;Do you have problem with finding your nginx executable? If nginx is running already, do this:&lt;/p&gt;
&lt;pre&gt;
&lt;code&gt;ps aux | grep [n]ginx&lt;/code&gt;
&lt;/pre&gt;
&lt;p&gt;The output will indicate the nginx executable path. And instead of just typing nginx in above command you should use the fullpath. (e.g. &lt;code&gt;/opt/etc/nginx -V 2&gt;&amp;1 | grep -o http_stub_status_module&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;You should get an output like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;with-http_stub_status_module
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;alert alert-danger&#39;&gt;
If you dont see any output it means it is not compiled!
&lt;/div&gt;


&lt;h2&gt;Monitoring address&lt;/h2&gt;

&lt;p&gt;Open your config file. You can find it&#39;s path by:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;nginx -V 2&amp;gt;&amp;amp;1 | grep -o &#39;conf-path=[^ ]*&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now inside one of your &lt;code&gt;server { ... }&lt;/code&gt; tags, add below lines (it can be any of your server tags, more commonly the one listening to port 80 or 8080):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;location /status {
  stub_status on;
  access_log   off;
  allow 127.0.0.1;
  deny all;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now reload your nginx with the new configuration by following command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;sudo nginx -s reload
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;alert alert-info alert-tip&#39;&gt;
&lt;h3&gt;No result?&lt;/h3&gt;
&lt;p&gt;Can&#39;t load it? make sure you are using fullpath to your nginx executable and you have the right permissions.&lt;/p&gt;
&lt;/div&gt;


&lt;h2&gt;Check the stats&lt;/h2&gt;

&lt;p&gt;Now open a web browser and access it at &lt;strong&gt;http://YOUR_IP_OR_ADDRESS/status&lt;/strong&gt;. or use wget to read it from terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;wget http://127.0.0.1/status
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#39;alert alert-info alert-tip&#39;&gt;
&lt;h3&gt;No result?&lt;/h3&gt;
&lt;p&gt;Which port your server tag is listening to? 80, 8080 or something else? If it is port 8080 do this &lt;code&gt;wget http://127.0.0.1:8080/status&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;


&lt;p&gt;You should see a result like this in your browser (or if you have used wget, in the downloaded file &lt;code&gt;cat status&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Active connections: 20
server accepts handled requests
 20428 20428 51058 
 Reading: 0 Writing: 10 Waiting: 10
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Active connections&lt;/strong&gt; The current number of active client connections including Waiting connections. A single Client can have multiple connections with your server.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accepts&lt;/strong&gt; The total number of accepted client connections.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Handled&lt;/strong&gt; The total number of handled connections. Generally, the parameter value is the same as accepts unless some resource limits have been reached.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Requests&lt;/strong&gt; The total number of client requests. Dividing this number by &lt;strong&gt;Handled&lt;/strong&gt; will give you number of requests per connection handled by Nginx (51058/20428 = 2.49 requests per connection).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Reading&lt;/strong&gt; The current number of connections where nginx is reading the request header.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Writing&lt;/strong&gt; The current number of connections where nginx is writing the response back to the client (This includes: nginx reads request body, processes request, or writes response to a client).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Waiting&lt;/strong&gt; The current number of idle client connections waiting for a request. This is &lt;strong&gt;Active - (Reading + Writing)&lt;/strong&gt;. This is keep alive connections and having a high &lt;strong&gt;Waiting&lt;/strong&gt; number is not a bad thing. It means how many connections are still open and waiting for either a new request, or the keepalive expiration. You can change it in your nginx.conf file by modifying &lt;code&gt;keepalive_timeout&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

</content>
 </entry>
 
 <entry>
   <title>Installing Nginx in Linux from Source</title>
   <link href="YOUR_URL/installing-nginx-in-linux-from-source.html"/>
   <updated>2014-09-13T00:00:00+10:00</updated>
   <id>BLOG_URL/installing-nginx-in-linux-from-source</id>
   <content type="html">&lt;h1&gt;Installing Nginx in Linux from Source&lt;/h1&gt;

&lt;h3&gt;Download Nginx Source&lt;/h3&gt;

&lt;p&gt;Login as &lt;strong&gt;root&lt;/strong&gt; and do this:&lt;/p&gt;

&lt;h4&gt;Ubuntu&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;apt-get install libcurl4-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;CentOS&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;yum install curl-devel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then move to src folder (create it if you don&#39;t have it) and download the nginx source:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;shell&quot;&gt;cd /usr/local/src
&lt;/code&gt;&lt;/pre&gt;
</content>
 </entry>
 
 
</feed>